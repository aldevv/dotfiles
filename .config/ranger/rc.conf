#
# YOU CAN USE COMMANDS.py
# use fm.notify instead of print()
#=======================================================================================
#   fm actions: https://github.com/ranger/ranger/blob/master/ranger/core/actions.py
#=======================================================================================
#  Hooks: https://github.com/ranger/ranger/blob/master/ranger/api/__init__.py
#  Signals: https://github.com/ranger/ranger/wiki/Signals-and-Hooks
#=======================================================================================
#  Linemodes: https://github.com/ranger/ranger/wiki/Custom-linemodes
#
#
# is regex ~/Master/Learn$ so it doesn't become recursive
#
setlocal path="~/Master/Learn" sort natural

map L  eval fm.execute_console('bulkrename') if fm.thisdir.marked_items else fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)
map a  eval fm.execute_console('bulkrename') if fm.thisdir.marked_items else fm.execute_console('rename_append')

map ye eval fm.copy(dirarg=dict(up=1), narg=quantifier)
map yn eval fm.copy(dirarg=dict(down=1), narg=quantifier)


map T taskview_open

map de eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map dn eval fm.cut(dirarg=dict(down=1), narg=quantifier)

# see api:
# in github, ranger/config/commands

# find song playing in mpd
map gom eval from ranger.ext.spawn import spawn; fm.select_file("/home/solus/Music/" + spawn("mpc -f %file% | head -1"))

set line_numbers relative
#set colorscheme unix
#
#vsc aware for certain path
setlocal path="~/Master/Projects" vcs_aware true
setlocal path="~/Master/Work" vcs_aware true
setlocal path="~/Master/Learn" vcs_aware true

map <a-t> tag_toggle |
map ,t mark_tag |
map ,T unmark_tag |
map }     move_parent 1
map {     move_parent -1
map ]     traverse
map [     traverse_backwards
# map ¿ shell git clone $(xclip -out -selection clipboard)
# map ¡ shell git clone --depth=1 $(xclip -out -selection clipboard)
map ¿ shell link="$(xsel -b -o)"; [[ $(echo "$link" | cut -d " " -f 1) == "git" ]] && eval "$link" || git clone "$link"
# map ¡ shell link="${$(xsel -b -o)#git clone }"; git clone --depth=1 $link
map ¡ shell link="$(xsel -b -o)"; first=$(echo "$link" | cut -d " " -f 1); second=$(echo "$link" | cut -d " " -f 2); third=$(echo "$link" | cut -d " " -f 3); fourth=$(echo "$link" | cut -d " " -f 4); [[ "$first" == "git" ]] && eval "$first $second $([[ $third =~ depth ]] && echo $third $fourth || echo --depth=1 $third)" || git clone --depth=1 "$link"

map w shell $SHELL
map ñ console
map ,du shell -p du --max-depth=1 -h --apparent-size
map yu shell sudo cp %s /mnt
# map du shell -f sudo mv %s /mnt; notify-send "moved to usb!"
# map cu shell -f sudo cp %s /mnt; notify-send "copied to usb!"
map cu shell -f [[ -n $(/bin/ls -A /mnt) ]] && sudo cp %s /mnt && notify-send "copied to usb!" || notify-send "device not mounted"
map du shell -f [[ -n $(/bin/ls -A /mnt) ]] && sudo mv %s /mnt && notify-send "copied to usb!" || notify-send "device not mounted"
# map du shell -f sudo moveToUsb

# walpapers
# map bw shell wal -i %s
map ! console shell -w%space
map ,b shell -w changeWallpaperKeepBorders %s
map ,B shell changeWallpaperKeepBorders

# ===================================================================
# == Leader
# ===================================================================
map ,g console grep%space

# search
map - console search -ltsrk%space
map _ console filter -ltsrk%space

map ,- console search -vltsrk%space
map ,_ console filter -vltsrk%space

# s: smart case, f: filter as you type, r: regex search, a: open file after match, k: keep the console open after changing folder
map ,v console mark -ftsrk%space
map ,V console mark -vftsrk%space

# permanent filter
map .v console mark -pftsrk%space
map .V console mark -pvftsrk%space

map .c filter

#upload file
map ,u shell -w uploadFile %s


#convert to pdf
# map ,z shell echo "zip name: "; read -r message; zip -r $message %s
# map ,z shell zipRanger %s

# chain  for multiple commands !
alias compress shell echo "zip name: ";read -r message;if [[ -z "$message" ]]; then if [[ "$#" == 1 ]]; then message="$1.zip"; else message="files.zip" fi;fi; zip -r "$message" %s
map ,z chain compress; mark_files all=True val=False

#convert to pdf
map do shell doc2pdfAPI %s

#secondary way
# map do shell doc2pdf %s

#see permissions
map Md linemode devicons

# encryption
map ,E shell gpg -e %s
map ,D shell name=$(removeExt %s); gpg -o $name -d %s
# ===================================================================

map lt console shell -f touch%space
map lf console mkdir%space
# map fo  console find%space
map f fzf_select
map F rg_select
map yl YankContent
map yc shell cat %p | xsel -b
# map yc shell cat %p | xclip -sel clip

# auto
map lch shell sudo chmod +x %s
map lco shell sudo chown -R kanon:kanon %s
# map ,cO shell sudo chown kanon:kanon %s/**/*
map ,n shell npm start 2>/dev/null
map ,en shell [ ! -e '.env' ] && python3 -m venv .venv 2>/dev/null;
# map lsac shell source .env/bin/activate && nvim %f
map lsac shell source .venv/bin/activate && nvim %f

#git
map lgi shell git init
alias gc shell git checkout
alias gR shell git reset
alias gRh shell git reset --hard
map lgst shell -w clear; git status
map lgaa shell git add %s
map lgau shell git add -U
map lggc shell echo "message: "; read -r message; git commit -m $message
map lggp shell git push origin HEAD
map lggP shell git pull origin HEAD
map lglg shell -w clear; git log
map lgr shell echo "remote-url: "; read -r message; git remote add origin $message


#git special
#
alias dst shell -w clear; git --git-dir=$HOME/.local/share/dotfiles/ --work-tree=$HOME status
alias daa shell git --git-dir=$HOME/.local/share/dotfiles/ --work-tree=$HOME add %s
alias dau shell git --git-dir=$HOME/.local/share/dotfiles/ --work-tree=$HOME add -u
alias dlg shell -w git --git-dir=$HOME/.local/share/dotfiles/ --work-tree=$HOME log --oneline
alias dgc shell echo "message: "; read -r message; git --git-dir=--git-dir=$HOME/.local/share/dotfiles/ --work-tree=$HOME commit -m $message
alias dgp shell  git --git-dir=--git-dir=$HOME/.local/share/dotfiles/ --work-tree=$HOME push origin HEAD
alias drm shell git --git-dir=$HOME/.local/share/dotfiles/ --work-tree=$HOME rm --cached %s


map ldaa chain daa; mark_files all=True val=False
map ldau dau
map ldst dst
map ldgc dgc
map ldlg dlg
map ldgp dgp
map ldrm drm


#curl
alias curl shell doCurl
map ,cc curl

# delete
# shell [-flags]
# flags are:
#  f   Fork the process, i.e. run in background. Please use this flag
# instead of calling "disown" or "nohup", to avoid killing the
# background command when pressing Ctrl+C in ranger.
# c   Run the current file only, instead of the selection
# r   Run application with root privilege (requires sudo)
# t   Run application in a new terminal window
# There are some additional flags that can currently be used only in the "shell" command:
# (for example ":shell -w df")
# p   Redirect output to the pager
# s   Silent mode.  Output will be discarded.
# w   Wait for an Enter-press when the process is done

map dtt shell -s mv -v -- %s ~/.local/share/Trash/files
map dti shell -s mv -i -v -- %s ~/.local/share/Trash/files
map dts shell -s sudo mv -v -- %s ~/.local/share/Trash/files
map DDI shell rm -rf -i -- %s
map DDS shell sudo rm -rf -- %s
map DDD chain shell -f rm -rf -- %s; shell -f [[ $(pwd) =~ "$REMOTES.*" ]] && sleep 1; reload_cwd;
# should do the same as above
# map DDA chain shell -f -r sudo rm -rf %s; reload_cwd
map .r open_with pwdranger
map .R open_with pwdrangersudo
map .t open_with pwdterm
map .n open_with newTermOpen
map .N open_with newTermOpenRoot
map .- open_with rootOpen

#Mapping -a drags all files at once, -x ; it closes after the drag
# -t to drag something to it
#normal
map b shell dragon -a -x  %s
# doesn't exit
map B shell dragon -a %s

#individual
map dri shell dragon  %s

# uses scripts
map drm shell mvdragon
map drc shell cpdragon
map drd shell dldragon

#set use_preview_script true
set preview_images_method ueberzug
set preview_images true

copymap <UP>       e
copymap <DOWN>     n
copymap <LEFT>     h
copymap <RIGHT>    i
map k  search_next
map K  search_next forward=False
map H  history_go -1
map I  history_go 1
#Downloading
map ytv console shell youtube-dl -ic%space
map yta console shell youtube-dl -xic%space

#preview
map <A-n> scroll_preview 1
map <A-e> scroll_preview -1
map ll display_file
map lv console edit%space
map lV console edit %s

# Console Movement
cmap <a-e>    eval fm.ui.console.history_move(-1)
cmap <a-n>  eval fm.ui.console.history_move(1)
cmap <a-h>  eval fm.ui.console.move(left=1)
cmap <a-i> eval fm.ui.console.move(right=1)
cmap <a-b> eval fm.ui.console.move_word(left=1)
cmap <a-w> eval fm.ui.console.move_word(right=1)

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <A-e>        eval fm.ui.console.delete_rest(1)
cmap <A-n>        eval fm.ui.console.delete_rest(-1)
cmap <c-b>        eval fm.ui.console.delete_word()
cmap <c-w>        eval fm.ui.console.delete_word(backward=False)
# cmap <C-v>        eval fm.ui.console.paste()

# Pager Movement
pmap  n       pager_move  down=1
pmap  e       pager_move  up=1
pmap  h       pager_move  left=4
pmap  i       pager_move  right=4
pmap  gg      pager_move  to=0
pmap  G       pager_move  to=-1
pmap  <c-f>   pager_move  up=1.0    pages=True
pmap  <c-b>   pager_move  down=1.0  pages=True
pmap  <C-d>   pager_move  down=0.5  pages=True
pmap  <C-u>   pager_move  up=0.5    pages=True


# sort folders local, because only one folder
setlocal path="/home/kanon/Master/Classes/2021-1/GERENCIA/licitacion/licitaciones-2021-I/" sort natural
#setlocal path=~/Screenshots sort_reverse False

# default sort
set sort ctime
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

#added online
set column_ratios 1,3,4

#set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$
#drawborders options:
#
# none           no borders of any sort
# outline        draw an outline around all the columns
# separators     draw only vertical lines between columns
# both           both of the above
set draw_borders none
set hidden_filter ^\.|\.(?:pyc|vrb|pyo|lof|bak|swp|aux|log|nav|out|snm|toc|bcf|run\.xml|synctex\.gz|blg|bbl)$|^lost\+found$|^__(py)?cache__$
set show_hidden false
set confirm_on_delete multiple
set automatically_count_files true
set open_all_images true
# for version control awareness (like git)
set vcs_aware false
set vcs_backend_git enabled
set vcs_backend_bzr disabled
set vcs_backend_hg disabled
set unicode_ellipsis false
set show_hidden_bookmarks false
set colorscheme default
set preview_files true
set preview_directories true
set collapse_preview true
set save_console_history false
set status_bar_on_top false
set draw_progress_bar_in_status_bar true
set dirname_in_tabs true
set mouse_enabled true
set display_size_in_main_column true
set display_size_in_status_bar true
set display_tags_in_all_columns true
set update_title false
set update_tmux_title true
set shorten_title 3
set tilde_in_titlebar true
set max_history_size 20
set max_console_history_size 50
set scroll_offset 8
set flushinput true
set padding_right true
set autosave_bookmarks false
set autoupdate_cumulative_size false
set show_cursor false
set xterm_alt_key false
set cd_bookmarks false
set preview_max_size 0
set show_selection_in_titlebar true
set idle_delay 2000
set metadata_deep_search false



# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Changing priority and deleting tasks
tmap N          eval -q fm.ui.taskview.task_move(-1)
tmap E          eval -q fm.ui.taskview.task_move(0)
default_linemode devicons

# Tabs
#
map <F1>     tab_open 1
map <F2>     tab_open 2
map <F3>     tab_open 3
map <F4>     tab_open 4
map <F5>     tab_open 5
map <F6>     tab_open 6
map <F7>     tab_open 7
map <F8>     tab_open 8
map <F9>     tab_open 9

# Sort
map or setlocal sort_reverse!
map oz setlocal sort=random
map os chain setlocal sort=size;      setlocal sort_reverse=False
map ob chain setlocal sort=basename;  setlocal sort_reverse=False
map on chain setlocal sort=natural;   setlocal sort_reverse=False
map om chain setlocal sort=mtime;     setlocal sort_reverse=False
map oc chain setlocal sort=ctime;     setlocal sort_reverse=False
map oa chain setlocal sort=atime;     setlocal sort_reverse=False
map ot chain setlocal sort=type;      setlocal sort_reverse=False
map oe chain setlocal sort=extension; setlocal sort_reverse=False

map oS chain setlocal sort=size;      setlocal sort_reverse=True
map oB chain setlocal sort=basename;  setlocal sort_reverse=True
map oN chain setlocal sort=natural;   setlocal sort_reverse=True
map oM chain setlocal sort=mtime;     setlocal sort_reverse=True
map oC chain setlocal sort=ctime;     setlocal sort_reverse=True
map oA chain setlocal sort=atime;     setlocal sort_reverse=True
map oT chain setlocal sort=type;      setlocal sort_reverse=True
map oE chain setlocal sort=extension; setlocal sort_reverse=True


# linemode
map Mf linemode filename
map Mi linemode fileinfo
map Mc linemode mtime
# map Mm linemode mtime
# not supported
# map Mc linemode ctime
map Mh linemode humanreadablemtime
map Mp linemode permissions
map Ms linemode sizemtime
map MH linemode sizehumanreadablemtime
map Mt linemode metatitle
map Md linemode devicons
# get dir size
map Mo chain mark_files all=True toggle=True; get_cumulative_size; mark_files all=True toggle=True

# in tag
map Or setintag sort_reverse!
map Oz setintag sort=random
map Os chain setintag | sort=size;      setintag | sort_reverse=False
map Ob chain setintag | sort=basename;  setintag | sort_reverse=False
map On chain setintag | sort=natural;   setintag | sort_reverse=False
map Om chain setintag | sort=mtime;     setintag | sort_reverse=False
map Oc chain setintag | sort=ctime;     setintag | sort_reverse=False
map Oa chain setintag | sort=atime;     setintag | sort_reverse=False
map Ot chain setintag | sort=type;      setintag | sort_reverse=False
map Oe chain setintag | sort=extension; setintag | sort_reverse=False

map OS chain setintag | sort=size;      setintag | sort_reverse=True
map OB chain setintag | sort=basename;  setintag | sort_reverse=True
map ON chain setintag | sort=natural;   setintag | sort_reverse=True
map OM chain setintag | sort=mtime;     setintag | sort_reverse=True
map OC chain setintag | sort=ctime;     setintag | sort_reverse=True
map OA chain setintag | sort=atime;     setintag | sort_reverse=True
map OT chain setintag | sort=type;      setintag | sort_reverse=True
map OE chain setintag | sort=extension; setintag | sort_reverse=True


# Filter stack
map ,.d filter_stack add type d
map ,.f filter_stack add type f
map ,.l filter_stack add type l
map ,.m console filter_stack add mime%space
map ,.n console filter_stack add name%space
map ,.# console filter_stack add hash%space
map ,." filter_stack add duplicate
map ,.' filter_stack add unique
map ,.| filter_stack add or
map ,.& filter_stack add and
map ,.! filter_stack add not
map ,.r filter_stack rotate
map ,.c filter_stack clear
map ,.* filter_stack decompose
map ,.p filter_stack pop
map ,.. filter_stack show




source /home/kanon/.config/ranger/shortcuts.conf
